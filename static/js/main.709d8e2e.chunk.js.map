{"version":3,"sources":["CircleSelector.jsx","Circles.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","props","changeSelectedId","id","slice","call","document","querySelectorAll","map","data","classList","remove","getElementById","className","innerText","setId","onClick","Circles","App","useState","selectedId","setSelectedId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAgCeA,MA9Bf,SAAwBC,GACtB,IAAMC,EAAmB,SAACC,GACxB,GAAGC,MAAMC,KAAKC,SAASC,iBAAiB,WAAWC,KAAI,SAAUC,GAC/D,OAAOA,EAAKC,UAAUC,OAAO,eAE/BL,SAASM,eAAeT,GAAIU,UAAY,WACxCP,SAASM,eAAeT,GAAIW,UAA5B,iBAAkDX,EAAlD,aACAF,EAAMc,MAAMZ,IAGd,OACE,yBAAKU,UAAU,kBACb,4BAAQV,GAAG,IAAIa,QAAS,kBAAMd,EAAiB,MAAMW,UAAU,YAA/D,mBAIA,4BAAQV,GAAG,IAAIa,QAAS,kBAAMd,EAAiB,OAA/C,mBAIA,4BAAQC,GAAG,IAAIa,QAAS,kBAAMd,EAAiB,OAA/C,mBAIA,4BAAQC,GAAG,IAAIa,QAAS,kBAAMd,EAAiB,OAA/C,qBCLSe,MAnBf,SAAiBhB,GACf,OACE,yBAAKY,UAAU,WACb,yBAAKV,GAAG,IAAIU,UAAuB,KAAZZ,EAAME,GAAY,WAAa,IAAtD,KAGA,yBAAKA,GAAG,IAAIU,UAAuB,KAAZZ,EAAME,GAAY,WAAa,IAAtD,KAGA,yBAAKA,GAAG,IAAIU,UAAuB,KAAZZ,EAAME,GAAY,WAAa,IAAtD,KAGA,yBAAKA,GAAG,IAAIU,UAAuB,KAAZZ,EAAME,GAAY,WAAa,IAAtD,OCSSe,MAlBf,WAAgB,IAAD,EACuBC,mBAAS,KADhC,mBACNC,EADM,KACMC,EADN,KAOb,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAAlB,6BACA,8BACE,kBAAC,EAAD,CAAgBE,MARC,SAAAZ,GACrBkB,EAAclB,MAQV,kBAAC,EAAD,CAASA,GAAIiB,OCLDE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASM,eAAe,SDyHpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.709d8e2e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CircleSelector(props) {\n  const changeSelectedId = (id) => {\n    [].slice.call(document.querySelectorAll(\"button\")).map(function (data) {\n      return data.classList.remove(\"selected\");\n    });\n    document.getElementById(id).className = \"selected\";\n    document.getElementById(id).innerText = `Circle ${id} selected`;\n    props.setId(id);\n  };\n\n  return (\n    <div className=\"CircleSelector\">\n      <button id=\"1\" onClick={() => changeSelectedId(\"1\")} className=\"selected\">\n        Select Circle 1\n      </button>\n\n      <button id=\"2\" onClick={() => changeSelectedId(\"2\")}>\n        Select Circle 2\n      </button>\n\n      <button id=\"3\" onClick={() => changeSelectedId(\"3\")}>\n        Select Circle 3\n      </button>\n\n      <button id=\"4\" onClick={() => changeSelectedId(\"4\")}>\n        Select Circle 4\n      </button>\n    </div>\n  );\n}\nexport default CircleSelector;\n","import React, { useState } from \"react\";\n\nfunction Circles(props) {\n  return (\n    <div className=\"Circles\">\n      <div id=\"1\" className={props.id == \"1\" ? \"selected\" : \"\"}>\n        1\n      </div>\n      <div id=\"2\" className={props.id == \"2\" ? \"selected\" : \"\"}>\n        2\n      </div>\n      <div id=\"3\" className={props.id == \"3\" ? \"selected\" : \"\"}>\n        3\n      </div>\n      <div id=\"4\" className={props.id == \"4\" ? \"selected\" : \"\"}>\n        4\n      </div>\n    </div>\n  );\n}\n\nexport default Circles;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport CircleSelector from \"./CircleSelector\";\nimport Circles from \"./Circles\";\n\nfunction App() {\n  const [selectedId, setSelectedId] = useState(\"1\");\n\n  const changeButtonId = id => {\n    setSelectedId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"> UNIT 4 FINAL ASSESSMENT </header>\n      <main>\n        <CircleSelector setId={changeButtonId} />\n        <Circles id={selectedId} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}